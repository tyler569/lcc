
import math : sqrt;

its_basically_jai :: true;

compile_time_value :: true;

#if compile_time_value

name : type;
name : type = value;

name :: value;      // const
name :: struct {}   // typedef
name :: enum u32 {} // ditto

name :: name

name :: ()

main :: () {
    name : type;
    name : type = value;
    name := value;
    
    name : [10] int = [0]; // set length, 0'd or copied from given
    name : [..] int = [1, 2, 3, 4]; //set length, but autodetermined from initializer
    name : [%] int  = []; // unknown length - view into memory (like pointer, but expressing different intent)

    // Syntax ideas for owned arrays or vectors.
    // Do I do boxed shit?
    name : [@] int
    name : [#] int
    name : [!] int
    name : ! int

    // Do I do lambdas?  Do they capture, or are they just functions?
    // Is capturing explicit like C++ or implicit like everything else?
    name :: [capture] (argument : type) -> return {
        return capture;
    }

    name : * int;   // but parsing '*' will be strange
    name : ptr int; // but I don't like this waaa
    name : ptr int = addr 10; // ERROR : 10 does not have a storage class
    


    name : 
}

function :: (x : int64, y : int64, z : int64) -> int64 {
    return sqrt(x*x + y*y + z*z);
}

// comment

/* comment */

/* comments /* nest */ as they should */

#if false

removed

#end

#end
